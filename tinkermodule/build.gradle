if (isUserModule.toBoolean()) {
    apply plugin: 'com.android.library'

} else {
    apply plugin: 'com.android.application'

}

android {
    compileSdkVersion 28



    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            if (isUserModule.toBoolean()) {
                manifest.srcFile 'src/main/release/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':provider')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    //可选，用于生成application类
    compileOnly("com.tencent.tinker:tinker-android-anno:$tinker_version")
    //tinker的核心库
    implementation("com.tencent.tinker:tinker-android-lib:$tinker_version")
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def backPath =  file("${buildDir}/backApk")

ext{
    tinker_enable = true
    tinkerOldApkPath ="${backPath}/"
}
def buildTinker(){
        return ext.tinker_enable
}
def getOldApkPath(){
    return ext.getOldApkPath

}
if (buildTinker()){

    //如果启用tinker
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch{
        oldApk = getOldApkPath()//指定旧apk的路径

    }

}